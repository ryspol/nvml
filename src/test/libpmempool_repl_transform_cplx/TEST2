#!/bin/bash -e
#
# Copyright 2016, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
#     * Neither the name of the copyright holder nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# libpmempool_replica_transform_cplx/TEST2 -- test for checking replica
# transform for complex poolset
#
export UNITTEST_NAME=libpmempool_replica_transform_cplx/TEST2
export UNITTEST_NUM=2

. ../unittest/unittest.sh

require_fs_type pmem any

setup

LOG=out${UNITTEST_NUM}.log
LOG_TEMP=out${UNITTEST_NUM}_part.log
rm -rf $LOG && touch $LOG
rm -rf $LOG_TEMP && touch $LOG_TEMP

TRANS_EXE=../libpmempool_repl_transform/libpmempool_repl_transform
LAYOUT=OBJ_LAYOUT
POOLSET_IN=$DIR/poolset_in.set
POOLSET_OUT=$DIR/poolset_out.set


declare FILES_IN=( "f1" )
declare FILES_IN_SIZE=( "260M" )

declare FILES_OUT=( "f1_new" )
declare FILES_OUT_SIZE=( "261M" )

# Create poolset
create_poolset ${POOLSET_IN}\
	${FILES_IN_SIZE[0]}:$DIR/${FILES_IN[0]}:z:${FILES_IN_SIZE[0]}:0777


# Create only poolset file
echo PMEMPOOLSET >> $POOLSET_OUT
echo -e ${FILES_OUT_SIZE[0]} $DIR/${FILES_OUT[0]} >> $POOLSET_OUT

expect_normal_exit $PMEMPOOL$EXESUFFIX create --layout=$LAYOUT\
	obj $POOLSET_IN
cat $LOG >> $LOG_TEMP

# Wrong size
expect_normal_exit $TRANS_EXE$EXESUFFIX\
	-o $POOLSET_OUT $POOLSET_IN >> $LOG
cat $LOG >> $LOG_TEMP

# Two flags at the same time
expect_normal_exit $TRANS_EXE$EXESUFFIX\
	-o $POOLSET_OUT -f 3 $POOLSET_IN >> $LOG
cat $LOG >> $LOG_TEMP

# Correct output poolset
rm $POOLSET_OUT
FILES_OUT_SIZE[0]="260M"
echo PMEMPOOLSET >> $POOLSET_OUT
echo -e ${FILES_OUT_SIZE[0]} $DIR/${FILES_OUT[0]} >> $POOLSET_OUT

# Dry run
expect_normal_exit $TRANS_EXE$EXESUFFIX\
	-o $POOLSET_OUT -f 1 $POOLSET_IN >> $LOG
cat $LOG >> $LOG_TEMP

check_file $DIR/${FILES_IN[0]}

# Keep original
expect_normal_exit $TRANS_EXE$EXESUFFIX\
	-o $POOLSET_OUT -f 2 $POOLSET_IN >> $LOG
cat $LOG >> $LOG_TEMP

check_file $DIR/${FILES_OUT[0]}
check_file $DIR/f1_old

mv $LOG_TEMP $LOG
check

pass
